{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-5268f4d8-376c-49fd-87c5-159aaa394931.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"d1dec0","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"823826","input":"import numpy as np\nfrom scipy.stats import binom\nimport matplotlib.pyplot as plt\nfrom PIL import Image","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c601a9","input":"x = X[0]  # pattern 0\n# Wij^0 = xi^0 * xj^0\nx[C[0]]*x[0]  # C[0] vecindarion del nodo 0, x[0] estado del nodo 0 ","output":{"0":{"data":{"text/plain":"array([ 1,  1,  1, -1])"},"exec_count":16,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"282fe3","input":"# Measure the quality of retrieval \nM = []  # M is 1, perfect retrieval, M is 0 no retrieval\n\n#for each pattern x in X\nfor x in X:\n    xt = np.copy(x)  # pattern x in time 0\n    \n    m = [np.sum(x*xt)/N]  # initianl overlap in time 0, x is equal to xt, so m=1\n    \n    # update network for 100 steps\n    for ti in range(100):\n        xt = np.array([(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n        m += [np.sum(x*xt)/N]  # calculate overlap\n        if m[-1] == m[-2]:\n            break\n    M += [m[-1]]\n    \nplt.plot(np.array(range(1,len(X)+1))/k, M, ':o')\nplt.ylim((0,1))","output":{"0":{"data":{"text/plain":"(0.0, 1.0)"},"exec_count":17,"output_type":"execute_result"},"1":{"data":{"image/png":"d41359c24c83f149d48b56247e1eeb87d7ccbea8","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":17,"metadata":{"image/png":{"height":415,"width":706},"needs_background":"light"},"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"1e5632","input":"x[C[0]], x[0]","output":{"0":{"data":{"text/plain":"(array([ 1,  1,  1, -1]), 1)"},"exec_count":18,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"2bd505","input":"noise_level = 0.75\n\nnoisy_lenna = lenna.copy()\n\nfor i in range(np.shape(noisy_lenna)[1]):\n    if np.random.random() < noise_level:\n        noisy_lenna[0, i] = np.random.randint(2)*2 - 1\n\nplt.matshow(noisy_lenna.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nx = X[-1] \nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nnoisy_lenna.reshape((128,128))","output":{"0":{"data":{"text/plain":"array([[-1, -1,  1, ...,  1,  1, -1],\n       [-1, -1, -1, ...,  1, -1,  1],\n       [ 1,  1,  1, ...,  1, -1,  1],\n       ...,\n       [ 1,  1,  1, ...,  1,  1,  1],\n       [-1,  1, -1, ..., -1,  1,  1],\n       [ 1,  1,  1, ...,  1, -1, -1]])"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"dedcab322791f9900b1d374a527fcaad8b447584","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"f3c19c669f0d9fc4191065a249ed62254c98c499","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":18,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"5c8fc9","input":"lenna_rostro = np.zeros((128,128), dtype='int')\n\nlenna_rostro[40:100,40:100] = imgbw[40:100,40:100]\n\nplt.matshow(lenna_rostro, cmap='Greys')\na = plt.axis('off')\n\nx = X[-1] \nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"98abccc72bf00a9f9693c7ab1e70241d56925cef","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"},"1":{"data":{"image/png":"f3c19c669f0d9fc4191065a249ed62254c98c499","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":20,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"7d298d","input":"# kneihborhood, weighted connection with kneihgborhood\nxt[C[1]], W[1]","output":{"0":{"data":{"text/plain":"(array([1, 1, 1, 1]), array([2., 2., 0., 2.]))"},"exec_count":25,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"ca860b","input":"x = X[-1]  # Learned Lenna is in X[-1], last pattern\n\nxt = np.copy(lenna_rostro.flatten())  # init network in noisy lenna\n\nm = [np.sum(x * xt) / N]  # initial overlap\n\nfor ti in range(100):\n    # network update for t=100\n    xt = np.array([int(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n    m += [np.sum(x * xt) / N]  # test overlap x and xt (net state)\n    if m[-1] == m[-2]:\n        break\n\nplt.plot(m)\nm[-1]","output":{"0":{"data":{"text/plain":"0.4649658203125"},"exec_count":26,"output_type":"execute_result"},"1":{"data":{"image/png":"99588e86d90295635778b38a5dc244a3650acd89","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":26,"metadata":{"image/png":{"height":411,"width":714},"needs_background":"light"},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"fb84b9","input":"plt.matshow(xt.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"78b48c6d90f432e69f29807176dd5fc2384a366a","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":27,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"fa4e2c","input":"#np.random.seed(123)\n\nN = 128*128  # number of nodes 128x128 pixels\nk = 100  # avg. number of connections per node\nP = 9  # random patterns to learn\n\n# C := Network structure (connectivity topology)\nC = np.zeros((N,k), dtype='int')\nfor i in range(N):\n    for ki in range(k//2):\n        C[i, ki] = i + (ki+1)\n        C[i, ki+k//2] = i - (ki + 1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C >= N)] = C[np.where(C >= N)] - N\n\n# Rewiring\nomega = 0.2\nall_nodes = set(range(N))\n#print(all_nodes)\nfor i,ci in enumerate(C):\n    for j,cj in enumerate(ci):\n        #print(i, ci, cj, j)\n        if np.random.random() < omega:\n            available_nodes = list(all_nodes - (set([i] + ci) - set([cj])))[1:]\n            C[i, j] = np.random.choice(available_nodes)\n            \nC, np.shape(C)","output":{"0":{"data":{"text/plain":"(array([[    1,  7013,     3, ..., 16336, 16335, 16334],\n        [    2, 13126,     4, ..., 16337, 16336, 16335],\n        [    3,     4,     5, ..., 16338, 16337, 16336],\n        ...,\n        [16382,  5407,     0, ..., 16333, 16332, 16331],\n        [ 8540,  8745,     1, ..., 16334, 10043, 16332],\n        [    0,   604,     2, ...,  3106, 13946, 16333]]),\n (16384, 100))"},"exec_count":28,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"b3652c","input":"[np.sum(xt[C[nxi]]*W[nxi]) for nxi in range(N)]","output":{"0":{"data":{"text/plain":"[0.0, 6.0, 4.0, 4.0, 2.0, -2.0, 4.0, -6.0, -6.0, 6.0]"},"exec_count":29,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"f2bb64","input":"# Weights initialization\nW = np.array([np.zeros(len(ci)) for ci in C])\nW, np.shape(W)","output":{"0":{"data":{"text/plain":"(array([[0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.],\n        [0., 0., 0., ..., 0., 0., 0.]]),\n (16384, 100))"},"exec_count":29,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"067916","input":"from scipy.stats import bernoulli\n# Random network\nN = 128*128  # number of nodes 128x128 pixels\nk = 100  # avg. number of connections per node\nP = 9  # random patterns to learn\np = k/N\nC = []\nfor i in range(N):\n    C += np.where(np.insert(bernoulli.rvs(p, size=(N-1)), i, 0))\nC = np.array(C)\n#C","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"e5ae16","input":"#for each pattern x in X\nfor x in X:\n    # for each node i\n    for i in range(N):\n        W[i] = W[i] + x[C[i]]*x[i]\nW","output":{"0":{"data":{"text/plain":"array([[ 2.,  0.,  0., ..., -4.,  0.,  6.],\n       [ 2.,  0.,  0., ..., -2.,  0., -4.],\n       [ 0.,  0.,  4., ...,  4.,  2.,  4.],\n       ...,\n       [ 4., -2.,  6., ..., -4., -2.,  0.],\n       [ 0., -2.,  0., ..., -4., -2.,  0.],\n       [ 2., -2., -2., ..., -2., -2., -4.]])"},"exec_count":30,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"b1bf52","input":"x = X[-1]  # Learned Lenna is in X, last pattern\n\nxt = np.copy(noisy_lenna.flatten())  # init network in noisy lenna  \n        \nm = [np.sum(x * xt) / N]  # initial overlap\n\nfor ti in range(100):\n    # network update for t=100\n    xt = np.array([int(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n    m += [np.sum(x * xt) / N]  # test overlap x and xt (net state)\n    if m[-1] == m[-2]:\n        break\n        \nplt.plot(m)\nm[-1]","output":{"0":{"data":{"text/plain":"0.9993896484375"},"exec_count":31,"output_type":"execute_result"},"1":{"data":{"image/png":"2f97bc9737bc585a8c26ae69d69a792d5e4056dc","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":31,"metadata":{"image/png":{"height":411,"width":706},"needs_background":"light"},"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"0bef9c","input":"plt.matshow(xt.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"89afb2e480845638d2f83b13021966f035bd7ebe","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":32,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"118508","input":"x = X[0]\nxt = np.copy(x)\n[(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)]","output":{"0":{"data":{"text/plain":"[1, 1, 1, 1, 1, -1, 1, -1, -1, 1]"},"exec_count":35,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":49,"id":"1262ce","input":"x1 = np.array([ 1,  1,  1,  1,  1, -1,  1, -1, -1,  1])*-1\nx, x1","output":{"0":{"data":{"text/plain":"(array([ 1,  1,  1,  1,  1, -1,  1, -1, -1,  1]),\n array([-1, -1, -1, -1, -1,  1, -1,  1,  1, -1]))"},"exec_count":49,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"862241","input":"img = Image.open('./ann/lenna.png')\nimg = img.resize((128,128), Image.ANTIALIAS)\nimg","output":{"0":{"data":{"image/png":"07bb97b112acf2b6ee88a674c3ba93cc6e6c74d5","text/plain":"<PIL.Image.Image image mode=RGB size=128x128 at 0x7F74A772D198>"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"3d871a","input":"np.abs(np.sum(x*x1)/N)","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":51,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":55,"id":"7631a7","input":"M","output":{"0":{"data":{"text/plain":"[1.0, 0.8]"},"exec_count":55,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1b4f0e","input":"imggs = img.convert('L')\nimggs","output":{"0":{"data":{"image/png":"ae9152cc69b9ce9cd3ee6421f76fa62cfd6ecac7","text/plain":"<PIL.Image.Image image mode=L size=128x128 at 0x7F749E461C88>"},"exec_count":6,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b7a1e6","input":"# Random patterns\nX = binom.rvs(n=1, p=0.5, size=(P, N))*2 - 1\nX, np.shape(X)","output":{"0":{"data":{"text/plain":"(array([[-1,  1,  1, ..., -1,  1, -1],\n        [-1, -1,  1, ...,  1,  1, -1],\n        [ 1, -1, -1, ...,  1,  1,  1],\n        ...,\n        [-1, -1, -1, ..., -1,  1, -1],\n        [ 1,  1, -1, ...,  1,  1,  1],\n        [-1,  1,  1, ..., -1,  1,  1]]),\n (9, 16384))"},"exec_count":8,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"00c1c0","input":"th_value = 128\nimgbw = np.asarray(imggs)\nimgbw = (imgbw > th_value)*1\nimgbw = 1 - imgbw\nplt.matshow(imgbw, cmap='Greys')\nprint('activity:', 1 - np.mean(imgbw))\nlenna = imgbw.reshape(1, 128*128)*2-1\nX = np.concatenate((X, lenna))\nnp.shape(X)","output":{"0":{"name":"stdout","output_type":"stream","text":"activity: 0.49310302734375\n"},"1":{"data":{"text/plain":"(10, 16384)"},"exec_count":9,"output_type":"execute_result"},"2":{"data":{"image/png":"52aa20eb0c6d5fa6fa950756e99d98f2337c6c80","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":424,"width":431},"needs_background":"light"},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"id":0,"time":1619626385162,"type":"user"}
{"last_load":1619626384594,"type":"file"}