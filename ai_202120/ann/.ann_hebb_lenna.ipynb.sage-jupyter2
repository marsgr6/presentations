{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":10,"id":"b27859","input":"plt.matshow(xt.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"4e197909a97217e03d488124c03641c620f29bb0","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"301a01cee90e1b276791efe5f647162f7afbf49e","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"f257a2","input":"lenna_rostro = np.zeros((128,128), dtype='int')\n\nlenna_rostro[40:100,40:100] = imgbw[40:100,40:100]\n\nplt.matshow(lenna_rostro, cmap='Greys')\na = plt.axis('off')\n\nx = X[-1] \nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"53831a45e2c3fee0e429b2e150f376015fe89a28","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"301a01cee90e1b276791efe5f647162f7afbf49e","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"105f54","input":"lenna_rostro = np.zeros((128,128), dtype='int')\n\nlenna_rostro[40:100,40:100] = imgbw[40:100,40:100]\n\nx = X[-1]  # Learned Lenna is in X, last pattern\n\nxt = np.copy(lenna_rostro.flatten()*2 - 1)  # init network in noisy lenna  \n        \nm = [np.sum(x * xt) / N]  # initial overlap\n\nfor ti in range(100):\n    # network update for t=100\n    xt = np.array([int(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n    m += [np.sum(x * xt) / N]  # test overlap x and xt (net state)\n    if m[-1] == m[-2]:\n        break\n        \nplt.plot(m)\nm[-1]","output":{"0":{"data":{"text/plain":"0.4478759765625"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"image/png":"62608d125425cfd491d3711a057e98d620271e76","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"f5f824","input":"plt.matshow(lenna_rostro, cmap='Greys')\na = plt.axis('off')\n\nplt.matshow(xt.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')","output":{"0":{"data":{"image/png":"53831a45e2c3fee0e429b2e150f376015fe89a28","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"11889c6e8f303500b3bea5f8bf68f76dae793e44","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"301a01cee90e1b276791efe5f647162f7afbf49e","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"585c91","input":"import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom PIL import Image","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"be3acc","input":"img = Image.open('lenna.png')\n\nimg = img.resize((128,128), Image.ANTIALIAS)\nimg","output":{"0":{"data":{"image/png":"07bb97b112acf2b6ee88a674c3ba93cc6e6c74d5","text/plain":"<PIL.Image.Image image mode=RGB size=128x128 at 0x7FCC0CE6F5F8>"},"exec_count":3,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"49c77a","input":"imggs = img.convert('L')\nimggs ","output":{"0":{"data":{"image/png":"ae9152cc69b9ce9cd3ee6421f76fa62cfd6ecac7","text/plain":"<PIL.Image.Image image mode=L size=128x128 at 0x7FCC0CE6F240>"},"exec_count":4,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"bc2217","input":"th_value = 128\n\nimgbw = np.asarray(imggs)  \n\nimgbw = (imgbw > th_value) * 1\n\nimgbw = 1 - imgbw\n\nplt.matshow(imgbw, cmap='Greys')\na = plt.axis('off')\n1 - np.mean(imgbw)","output":{"0":{"data":{"text/plain":"0.49310302734375"},"exec_count":5,"output_type":"execute_result"},"1":{"data":{"image/png":"301a01cee90e1b276791efe5f647162f7afbf49e","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ea93a1","input":"from scipy.stats import binom\n\nnp.random.seed(123)\n\nN = 16384  # number of nodes 128x128 pixels\nk = 100  # avg. number of connections per node\nP = 9  # random patterns to learn\n\n# C := Network structure (connectivity topology)\nC = np.zeros((N,k), dtype='int')\nfor i in range(N):\n    for ki in range(k//2):\n        C[i, ki] = i + (ki+1)\n        C[i, ki+k//2] = i - (ki + 1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C >= N)] = C[np.where(C >= N)] - N\n\nW = np.array([np.zeros(len(ci)) for ci in C])\n\nX = binom.rvs(n=1, p=0.5, size=(P, N))*2 - 1  # P random patterns\n\nlenna = imgbw.reshape(1, 16384)*2 - 1\n\nX = np.concatenate((X, lenna))  # Lenna image (concatenates at the end)\n\nM = []\n\n# Learn all patterns x in X\nfor pi, x in enumerate(X):\n    for i in range(N):\n        W[i] = W[i] + x[C[i]]*x[i]  # update weights, learn x\n    \nprint('Learning has finished!')","output":{"0":{"name":"stdout","output_type":"stream","text":"Learning has finished!\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"aa38da","input":"M = []\n\n# for each pattern x\nfor pi, x in enumerate(X):\n        \n    xt = np.copy(x)  # init network in pattern x  \n        \n    m = [np.sum(x * x) / N]  # initial overlap\n\n    for ti in range(100):\n        # network update for t=100\n        xt = np.array([int(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n        m += [np.sum(x * xt) / N]  # test overlap x and xt (net state)\n        if m[-1] == m[-2]:\n            break\n    M += [m[-1]]\n\nplt.plot(np.array(range(1,P+2))/k, M, ':o')\nplt.ylim((0,1))","output":{"0":{"data":{"text/plain":"(0, 1)"},"exec_count":7,"output_type":"execute_result"},"1":{"data":{"image/png":"40e5cebfdca8abfc1734ac7b110a63f35ff9f323","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"56467c","input":"noise_level = 0.75\n\nnoisy_lenna = lenna.copy()\n\nfor i in range(np.shape(noisy_lenna)[1]):\n    if np.random.random() < noise_level:\n        noisy_lenna[0, i] = np.random.randint(2)*2 - 1\n\nplt.matshow(noisy_lenna.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nx = X[-1] \nplt.matshow(x.reshape((128,128)), cmap='Greys')\na = plt.axis('off')\n\nnoisy_lenna.reshape((128,128))","output":{"0":{"data":{"text/plain":"array([[ 1, -1,  1, ...,  1,  1,  1],\n       [-1, -1, -1, ...,  1,  1, -1],\n       [-1, -1, -1, ..., -1, -1,  1],\n       ...,\n       [ 1, -1,  1, ...,  1,  1, -1],\n       [ 1, -1,  1, ..., -1,  1,  1],\n       [ 1, -1, -1, ..., -1,  1,  1]])"},"exec_count":8,"output_type":"execute_result"},"1":{"data":{"image/png":"912015c0287f45d3e069b77735c4beaf508d2b78","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"301a01cee90e1b276791efe5f647162f7afbf49e","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"adaf0c","input":"x = X[-1]  # Learned Lenna is in X, last pattern\n\nxt = np.copy(noisy_lenna.flatten())  # init network in noisy lenna  \n        \nm = [np.sum(x * xt) / N]  # initial overlap\n\nfor ti in range(100):\n    # network update for t=100\n    xt = np.array([int(np.sum(xt[C[nxi]]*W[nxi]) >= 0)*2-1 for nxi in range(N)])\n    m += [np.sum(x * xt) / N]  # test overlap x and xt (net state)\n    if m[-1] == m[-2]:\n        break\n        \nplt.plot(m)\nm[-1]","output":{"0":{"data":{"text/plain":"0.8094482421875"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"731eb19fcf6c4b0499ae946121b8e77290039394","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":7,"type":"cell"}
{"id":0,"time":1618878784418,"type":"user"}
{"last_load":1618272206096,"type":"file"}