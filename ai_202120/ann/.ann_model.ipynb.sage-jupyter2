{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"87ad8b","input":"import numpy as np\nfrom scipy.stats import bernoulli\nimport matplotlib.pyplot as plt","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"350851","input":"plt.matshow(pat*-1)","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fed964e7908>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"image/png":"5c767269a31cd7d2c8fdb5dc06923dd104e32f54","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"884dc9","input":"# build graph from skeleton\ngraph = sknw.build_sknw(skeleton)\n\n# draw image\nplt.imshow(digit, cmap='gray')\n\ncols = [\"green\", \"red\", \"blue\"]\ni = 0\n# draw edges by pts\nfor (s,e) in graph.edges():\n    ps = graph[s][e]['pts']\n    plt.plot(ps[:,1], ps[:,0], cols[i])\n    i += 1\n    print(ps)\n    \n# draw node by o\nnode, nodes = graph.node, graph.nodes()\nps = np.array([node[i]['o'] for i in nodes])\nplt.plot(ps[:,1], ps[:,0], 'r.')","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 6  7]\n [ 7  7]\n [ 8  7]\n [ 9  8]\n [10  8]\n [11  8]\n [12  8]\n [13  9]\n [14  9]\n [15  9]\n [16  9]\n [17  9]\n [18 10]\n [18 11]\n [18 12]\n [18 13]\n [18 14]\n [18 15]\n [17 16]\n [17 17]]\n[[ 7 17]\n [ 8 18]\n [ 9 18]\n [10 18]\n [11 18]\n [12 18]\n [13 18]\n [14 19]\n [15 19]]\n[[18 20]\n [19 20]\n [20 20]\n [21 20]\n [22 20]\n [23 20]]\n"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6c740f7ac8>]"},"exec_count":10,"output_type":"execute_result"},"2":{"data":{"image/png":"97f9635426e97dc75e35f6b847a68e9e916b1011","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":100,"id":"2a5f60","input":"def signo(delta):\n    if delta >= 0:\n        return 1\n    else:\n        return 0\n    \n    \ndef make_binary(v1, v2, th=0.01):\n    delta = v1 - v2\n    if np.abs(delta) > th:\n        return signo(delta)\n    else:\n        return bernoulli.rvs(p=0.5)\n\nxb = []\nyb = []\nth = 0.05\nfor i in range(1,len(x)):\n    xb += [make_binary(x[i], x[i-1], th)]\n    yb += [make_binary(y[i], y[i-1], th)]\n    #print(np.round(x[i-1], 4), np.round(x[i], 4), \n    #      np.round(y[i-1], 4), np.round(y[i], 4), xb[-1], yb[-1])\nxb = np.array(xb)\nyb = np.array(yb)\nplt.plot(np.cumsum(xb*2-1), np.cumsum(yb*2-1))\nplt.plot(np.cumsum(xb*2-1)[0], np.cumsum(yb*2-1)[0], 'x')\nplt.plot(np.cumsum(xb*2-1)[-1], np.cumsum(yb*2-1)[-1], 'o')\nplt.show()\n\nxb = []\nyb = []\nth = 0.05\nfor i in range(1,len(x)):\n    xb += [make_binary(x[i], x[i-1], th)]\n    yb += [make_binary(y[i], y[i-1], th)]\n    #print(np.round(x[i-1], 4), np.round(x[i], 4), \n    #      np.round(y[i-1], 4), np.round(y[i], 4), xb[-1], yb[-1])\nxb = np.array(xb)\nyb = np.array(yb)\nplt.plot(np.cumsum(xb*2-1), np.cumsum(yb*2-1))","output":{"0":{"data":{"image/png":"1f2b1996d1a8cef110ad047ca098bc9279e3dfbd","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6c51aa20b8>]"},"exec_count":100,"output_type":"execute_result"},"2":{"data":{"image/png":"4d49042450906abff7e07f9598b42f6ce1a644e6","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"3da79b","input":"# Ring network\nN = 10  # nodes\nK = 4  # degree\nC = np.zeros((10,4), dtype='int')\nfor i in range(K//2):\n    C[:,i*2] = np.array(range(N)) + (i+1)\n    C[:,i*2+1] = np.array(range(N)) - (i+1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C > N-1)] = C[np.where(C > N-1)] - N\n\nW = [bernoulli.rvs(0.5, size=len(ci))*2-1 for ci in C]\nx = bernoulli.rvs(0.5, size=N)\nC, W, x","output":{"0":{"data":{"text/plain":"(array([[1, 9, 2, 8],\n        [2, 0, 3, 9],\n        [3, 1, 4, 0],\n        [4, 2, 5, 1],\n        [5, 3, 6, 2],\n        [6, 4, 7, 3],\n        [7, 5, 8, 4],\n        [8, 6, 9, 5],\n        [9, 7, 0, 6],\n        [0, 8, 1, 7]]),\n [array([-1, -1, -1,  1]),\n  array([ 1, -1,  1, -1]),\n  array([-1,  1,  1,  1]),\n  array([-1,  1,  1,  1]),\n  array([ 1,  1, -1,  1]),\n  array([-1, -1, -1, -1]),\n  array([1, 1, 1, 1]),\n  array([ 1, -1, -1,  1]),\n  array([1, 1, 1, 1]),\n  array([ 1,  1,  1, -1])],\n array([1, 1, 1, 1, 1, 0, 1, 1, 0, 1]))"},"exec_count":11,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"44f13d","input":"np.sum(p*(-1*p))/4","output":{"0":{"data":{"text/plain":"-1.0"},"exec_count":11,"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"b9c28f","input":"# Hebb learning\n# Ring network\nN = 5  # nodes\nK = 2  # degree\nC = np.zeros((N,K), dtype='int')\nfor i in range(K//2):\n    C[:,i*2] = np.array(range(N)) + (i+1)\n    C[:,i*2+1] = np.array(range(N)) - (i+1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C > N-1)] = C[np.where(C > N-1)] - N\n\nW = [np.zeros(len(ci), dtype='int') for ci in C]\n\nW, C","output":{"0":{"data":{"text/plain":"([array([0, 0]), array([0, 0]), array([0, 0]), array([0, 0]), array([0, 0])],\n array([[1, 4],\n        [2, 0],\n        [3, 1],\n        [4, 2],\n        [0, 3]]))"},"exec_count":11,"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"41d47c","input":"C, W","output":{"0":{"data":{"text/plain":"(array([[1, 4],\n        [2, 0],\n        [3, 1],\n        [4, 2],\n        [0, 3]]),\n [array([0, 0]), array([0, 0]), array([0, 0]), array([0, 0]), array([0, 0])])"},"exec_count":13,"output_type":"execute_result"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"3d2d6f","input":"# evolution \nneuron_i = 2\nprint(C[neuron_i], x[C[neuron_i]], W[neuron_i])\nnp.sum(x[C[neuron_i]]*W[neuron_i])","output":{"0":{"name":"stdout","output_type":"stream","text":"[3 1 4 0] [0 0 1 0] [-1  1  1 -1]\n"},"1":{"data":{"text/plain":"1"},"exec_count":14,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":140,"id":"4a2f51","input":"from PIL import Image\n#Pixels higher than this will be 1. Otherwise 0.\nTHRESHOLD_VALUE = 130\n\n#Load image and convert to greyscale\nimg = Image.open(\"mandrill.png\")\nnewsize = (25, 25) \nimg = img.resize(newsize)\nplt.imshow(img)\nplt.show()\n\nimg = img.convert(\"L\")\n\nimgData = np.asarray(img)\nthresholdedData = (imgData > THRESHOLD_VALUE) * 1.0\n\nplt.imshow(thresholdedData, cmap=\"gray\")\nplt.show()\nnp.mean(thresholdedData)","output":{"0":{"data":{"image/png":"4cc8f8f5a55eff606ce96671397da8d781855a9e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"446fb7e11e16850e1bd7cdd5ce323811f06587f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"text/plain":"0.5024"},"exec_count":140,"output_type":"execute_result"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"359ed3","input":"# Estado de la red\nsigma = p*2 - 1\nsigma[C[3]]*sigma[3]","output":{"0":{"data":{"text/plain":"array([ 1, -1])"},"exec_count":15,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"530ff5","input":"# network learning\nfor i in range(N):\n    W[i] += sigma[C[i]]*sigma[i]","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"8b1f4c","input":"W","output":{"0":{"data":{"text/plain":"[array([-1, -1]),\n array([-1, -1]),\n array([-1, -1]),\n array([ 1, -1]),\n array([-1,  1])]"},"exec_count":17,"output_type":"execute_result"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":170,"id":"bea892","input":"noisy_data = thresholdedData.copy()\nnoise = 0.8\nfor i in range(25):\n    for j in range(25):\n        if np.random.random() < noise:\n            noisy_data[i][j] = bernoulli.rvs(0.5)\n            \nnoisy_data = thresholdedData.copy()\nfor i in range(20):\n    for j in range(20):\n        noisy_data[i][j] = 0\n\nplt.imshow(noisy_data, cmap=\"gray\")","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fddc49ea1d0>"},"exec_count":170,"output_type":"execute_result"},"1":{"data":{"image/png":"ed538e85683f332524e573f7f5904a126436ce54","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":173,"id":"c646b9","input":"plt.imshow(thresholdedData, cmap=\"gray\"); plt.show()\nplt.imshow(np.reshape(st_anterior, (25,25)), cmap=\"gray\")","output":{"0":{"data":{"image/png":"446fb7e11e16850e1bd7cdd5ce323811f06587f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fddc3de2278>"},"exec_count":173,"output_type":"execute_result"},"2":{"data":{"image/png":"446fb7e11e16850e1bd7cdd5ce323811f06587f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":52,"type":"cell"}
{"cell_type":"code","exec_count":175,"id":"d2d163","input":"plt.imshow(noisy_data, cmap=\"gray\"); plt.show()\nplt.imshow(thresholdedData, cmap=\"gray\"); plt.show()\nplt.imshow(np.reshape(st_1, (25,25)), cmap=\"gray\")","output":{"0":{"data":{"image/png":"ed538e85683f332524e573f7f5904a126436ce54","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"446fb7e11e16850e1bd7cdd5ce323811f06587f0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fddc40514a8>"},"exec_count":175,"output_type":"execute_result"},"3":{"data":{"image/png":"4535faae09597c35af427241c46cc80b9134905b","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":186,"id":"dffed0","input":"N = 25*25\nP = 29\nt = 10\npat = np.matrix(bernoulli.rvs(0.45, size=(N,P)))*2-1\npi = np.transpose(np.matrix(thresholdedData.flatten()*2-1))\npi_noisy = np.transpose(np.matrix(noisy_data.flatten()*2-1))\n\npat = np.concatenate((pat, pi), axis=1)\n\nw = pat*np.transpose(pat)\nst_anterior = pi_noisy\nm = []\nfor i in range(t):\n    st_actual = np.sign(w*st_anterior)\n    st_actual[np.where(st_actual == 0)] = 1\n    m += [(np.transpose(st_anterior)*pat)/N]\n    st_anterior = st_actual.copy()\n    if i == 1:\n        st_1 = st_actual.copy()","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":188,"id":"798c43","input":"for j in range(P+1):\n    data_p = []\n    for i in range(t):\n        data_p += [m[i][0,j]]\n    plt.plot(data_p)","output":{"0":{"data":{"image/png":"24c3a761e0524914763babe1bded73265901b95f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"3534f6","input":"# Ring network\nN = 5  # nodes\nK = 2  # degree\nC = np.zeros((N,K), dtype='int')\nfor i in range(K//2):\n    C[:,i*2] = np.array(range(N)) + (i+1)\n    C[:,i*2+1] = np.array(range(N)) - (i+1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C > N-1)] = C[np.where(C > N-1)] - N\n\nW = [bernoulli.rvs(0.5, size=len(ci))*2-1 for ci in C]\nx = bernoulli.rvs(0.5, size=N)\nC, W, x","output":{"0":{"data":{"text/plain":"(array([[1, 4],\n        [2, 0],\n        [3, 1],\n        [4, 2],\n        [0, 3]]),\n [array([-1, -1]),\n  array([ 1, -1]),\n  array([-1, -1]),\n  array([ 1, -1]),\n  array([-1,  1])],\n array([0, 1, 0, 0, 0]))"},"exec_count":2,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"da7644","input":"def signo(x):\n    if x < 0:\n        return -1\n    else:\n        return 1","pos":39,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"ef2c7e","input":"# Hebb learning\n# Ring network\nN = 10  # nodes\nK = 2  # degree\nC = np.zeros((N,K), dtype='int')\nfor i in range(K//2):\n    C[:,i*2] = np.array(range(N)) + (i+1)\n    C[:,i*2+1] = np.array(range(N)) - (i+1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C > N-1)] = C[np.where(C > N-1)] - N\n\nW = [np.zeros(len(ci), dtype='int') for ci in C]\nxi = bernoulli.rvs(0.5, size=N)*2-1\n\nW, C, xi","output":{"0":{"data":{"text/plain":"([array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0]),\n  array([0, 0])],\n array([[1, 9],\n        [2, 0],\n        [3, 1],\n        [4, 2],\n        [5, 3],\n        [6, 4],\n        [7, 5],\n        [8, 6],\n        [9, 7],\n        [0, 8]]),\n array([-1, -1,  1, -1,  1,  1, -1, -1,  1,  1]))"},"exec_count":23,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"e66d1d","input":"sigma, np.sum(sigma*(p*2 - 1))/N","output":{"0":{"data":{"text/plain":"(array([-1,  1, -1,  1,  1]), 1.0)"},"exec_count":25,"output_type":"execute_result"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"ef10c0","input":"# network retrieval evolution\nsigma_new = sigma.copy()\nfor i in range(N):\n    sigma_new[i] = signo(np.sum(sigma[C[i]]*W[i]))\nsigma_new, np.sum(sigma_new*(p*2 - 1))/N #state, overlap","output":{"0":{"data":{"text/plain":"(array([-1,  1, -1,  1,  1]), 1.0)"},"exec_count":26,"output_type":"execute_result"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"6dba9f","input":"import numpy as np\nfrom scipy.stats import bernoulli\nimport matplotlib.pyplot as plt\nfrom skimage.morphology import skeletonize\nimport pandas as pd","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"b35166","input":"# Hebbian learning\nC[7],xi[C[7]],xi[C[7]]*xi[7]\nW[7] += xi[C[7]]*xi[7]\nW","output":{"0":{"data":{"text/plain":"[array([0, 0]),\n array([0, 0]),\n array([0, 0]),\n array([0, 0]),\n array([0, 0]),\n array([0, 0]),\n array([0, 0]),\n array([-1,  1]),\n array([0, 0]),\n array([0, 0])]"},"exec_count":30,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"d14582","input":"# build graph from skeleton\ngraph = sknw.build_sknw(skeleton)\n\n# draw image\nplt.imshow(digit, cmap='gray')\n\n# draw edges by pts\nfor (s,e) in graph.edges():\n    ps = graph[s][e]['pts']\n    plt.plot(ps[:,1], ps[:,0], 'green')\n    \n# draw node by o\nnode, nodes = graph.node, graph.nodes()\nps = np.array([node[i]['o'] for i in nodes])\nplt.plot(ps[:,1], ps[:,0], 'r.')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f34da6c66d8>]"},"exec_count":30,"output_type":"execute_result"},"1":{"data":{"image/png":"c60276c4a1dbd90b70a54ee36c602ae99856e52d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"c430fe","input":"import matplotlib.pyplot as plt","output":{"0":{"name":"stderr","output_type":"stream","text":"/home/nbuser/anaconda3_501/lib/python3.6/site-packages/matplotlib/font_manager.py:229: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n  'Matplotlib is building the font cache using fc-list. '\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"d446ee","input":"np.sum(pat.flatten()*pat.flatten())/100","output":{"0":{"data":{"text/plain":"1.0"},"exec_count":33,"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":37,"id":"9c716f","input":"plt.matshow(np.array([np.insert(bernoulli.rvs(p, size=(N-1)), i, 0) for i in range(N)]))\nplt.matshow(np.array([np.insert(bernoulli.rvs(p, size=(N-1)), i, 0) for i in range(N)]))","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f46189841d0>"},"exec_count":37,"output_type":"execute_result"},"1":{"data":{"image/png":"79c2b0d2c9003891cb01dfab7c64b03ff66477a6","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"c7cb1d8a16796e321135d2533f9fe851777cbdb9","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"7a8d62","input":"# Random network\nN = 10\nK = 4\np = K/N\nC = []\nfor i in range(N):\n    C += [np.insert(bernoulli.rvs(p, size=(N-1)), i, 0)]\nC","output":{"0":{"data":{"text/plain":"[array([0, 1, 0, 1, 1, 0, 0, 0, 0, 0]),\n array([1, 0, 0, 0, 0, 0, 1, 1, 0, 1]),\n array([1, 1, 0, 0, 1, 1, 0, 0, 0, 1]),\n array([1, 1, 1, 0, 1, 0, 0, 1, 0, 0]),\n array([1, 0, 1, 0, 0, 1, 1, 0, 1, 0]),\n array([0, 0, 0, 1, 0, 0, 1, 0, 0, 0]),\n array([0, 0, 0, 0, 1, 1, 0, 0, 1, 1]),\n array([1, 1, 1, 1, 0, 0, 0, 0, 1, 1]),\n array([1, 0, 0, 0, 0, 0, 1, 0, 0, 0]),\n array([0, 0, 1, 0, 0, 0, 1, 0, 0, 0])]"},"exec_count":38,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"a0420c","input":"graph = sknw.build_sknw(skeleton)\ni = 0\npst = []\nfor (s,e) in graph.edges():\n    ps = graph[s][e]['pts']\n    pst += [ps]\n    plt.plot(np.array(ps[:,1]), np.array(ps[:,0])*-1, cols[i])\n    i += 1\n    print(ps)\n    \npat = np.concatenate(pst, axis=0)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 6  7]\n [ 7  7]\n [ 8  7]\n [ 9  8]\n [10  8]\n [11  8]\n [12  8]\n [13  9]\n [14  9]\n [15  9]\n [16  9]\n [17  9]\n [18 10]\n [18 11]\n [18 12]\n [18 13]\n [18 14]\n [18 15]\n [17 16]\n [17 17]]\n[[ 7 17]\n [ 8 18]\n [ 9 18]\n [10 18]\n [11 18]\n [12 18]\n [13 18]\n [14 19]\n [15 19]]\n[[18 20]\n [19 20]\n [20 20]\n [21 20]\n [22 20]\n [23 20]]\n"},"1":{"data":{"image/png":"ba141478e68babe2412d91438e8bcd293b8644c7","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"11bb79","input":"mnist = pd.read_csv('https://raw.githubusercontent.com/sbussmann/kaggle-mnist/master/Data/train.csv')","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"ab4453","input":"xir  = bernoulli.rvs(0.5, size=N)*2-1\nnp.sum(xi*(xir*-1))/N","output":{"0":{"data":{"text/plain":"0.0"},"exec_count":41,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"0a978a","input":"N = 500\nP = 9\nt = 10\npat = np.matrix(bernoulli.rvs(0.5, size=(N,P)))*2-1\n\nw = pat*np.transpose(pat)\nst_anterior = np.matrix(bernoulli.rvs(0.5, size=(N,1)))*2-1\nm = []\nfor i in range(t):\n    st_actual = np.sign(w*st_anterior)\n    st_actual[np.where(st_actual == 0)] = 1\n    m += [(np.transpose(st_anterior)*pat)/N]\n    st_anterior = st_actual.copy()","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":54,"id":"454251","input":"for j in range(P):\n    data_p = []\n    for i in range(t):\n        data_p += [m[i][0,j]]\n    plt.plot(data_p)","output":{"0":{"data":{"image/png":"f8fa1847b91867f282ac48b316db6d1c83a457ad","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":56,"id":"6ed451","input":"fx = signal.resample(xvals, 100)\nfy = signal.resample(yinterp, 100)\nplt.plot(fx, fy*-1, ':x')\nplt.show()","output":{"0":{"name":"stderr","output_type":"stream","text":"/home/nbuser/anaconda3_501/lib/python3.6/site-packages/scipy/signal/signaltools.py:2230: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n  Y[sl] += X[sl]  # add the component of X at N/2\n"},"1":{"data":{"image/png":"8802a58be005170d655555e7008a12e7cb81e585","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"1aa751","input":"from scipy import signal\nfx = signal.resample(pat[:,1], 1000)\nfy = signal.resample(pat[:,0], 1000)\nplt.plot(pat[:,1], pat[:,0]*-1)\nplt.show()\nplt.plot(fx, fy*-1)\nplt.show()\n\nxvals = np.linspace(np.min(pat[:,1]), np.max(pat[:,1]), 100)\nyinterp = np.interp(xvals, pat[:,1], pat[:,0])\nplt.plot(xvals, yinterp*-1, ':x')","output":{"0":{"data":{"image/png":"1d567fc2614fd966215fb50cb6dc3e0a9a39e57e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"878a37c565c76919079713af481b2ebd1c1923b7","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6c748993c8>]"},"exec_count":57,"output_type":"execute_result"},"3":{"data":{"image/png":"f8a838edf32d700e1a467b1062f1720bce0fe5b7","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ae0794","input":"digit = np.array(mnist.iloc[3][1:])\ndigit = np.reshape(digit, (28,28))\ndigit[np.where(digit > 0)] = 1\nplt.matshow(digit, cmap='gray')","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f6c7786ec88>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"9aab9dc0865d0c2252f17bdba52a9b2f99eb45b9","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ca0832","input":"bernoulli.rvs(0.5, size=5)","output":{"0":{"data":{"text/plain":"array([0, 1, 0, 1, 1])"},"exec_count":6,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"d9587c","input":"bernoulli.rvs(0.5, size=4)*2-1","output":{"0":{"data":{"text/plain":"array([-1,  1, -1,  1])"},"exec_count":6,"output_type":"execute_result"}},"pos":42,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"2229b7","input":"L = np.array([1, 2, 3])\nL[[0, 1]]","output":{"0":{"data":{"text/plain":"array([1, 2])"},"exec_count":61,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"2c4f84","input":"[np.insert(bernoulli.rvs(p, size=(N-1)), i, 0) for i in range(N)]","output":{"0":{"data":{"text/plain":"[array([0, 0, 1, 1, 0, 1, 0, 0, 0, 1]),\n array([0, 0, 0, 0, 0, 1, 1, 0, 0, 1]),\n array([1, 0, 0, 0, 0, 0, 1, 0, 0, 1]),\n array([0, 0, 0, 0, 0, 0, 1, 1, 1, 1]),\n array([1, 1, 1, 1, 0, 1, 1, 1, 0, 1]),\n array([1, 1, 0, 1, 1, 0, 0, 0, 1, 1]),\n array([0, 0, 1, 0, 0, 1, 0, 0, 0, 0]),\n array([0, 0, 0, 0, 0, 1, 1, 0, 0, 0]),\n array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0]),\n array([0, 1, 1, 1, 0, 1, 0, 1, 1, 0])]"},"exec_count":63,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":64,"id":"b892ea","input":"aux = []\nfor p in pat:\n    aux +=[(p[1],p[0])]\npatrs = signal.resample(aux, 100)\nplt.plot(patrs[:,0], patrs[:,1]*-1, ':x')\nplt.plot(patrs[:,0][0], patrs[:,1][0]*-1, 'o')\nplt.plot(patrs[:,0][-1], patrs[:,1][-1]*-1, 'x')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6c5824f860>]"},"exec_count":64,"output_type":"execute_result"},"1":{"data":{"image/png":"3a12dc3baa2c3046e1160f0204e74a1b83d0b371","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"9caef3","input":"x = patrs[:,0]\ny = patrs[:,1]*-1\nplt.plot(x,y, ':x')","output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7f6c748b72e8>]"},"exec_count":67,"output_type":"execute_result"},"1":{"data":{"image/png":"6ee6d0be08f97820f138cb17c1f39925a683d8fa","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"81f6fd","input":"skeleton = skeletonize(digit)","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"97b574","input":"p = _","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"bd3bf2","input":"plt.matshow(skeleton, cmap='gray')","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7f6c77592d30>"},"exec_count":8,"output_type":"execute_result"},"1":{"data":{"image/png":"2783b209b98ff633a9e46554266c15b1994e7a50","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"cd31cd","input":"p = _\np","output":{"0":{"data":{"text/plain":"array([-1,  1, -1,  1])"},"exec_count":8,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"380342","input":"pat = bernoulli.rvs(0.5, size=(10,10))*2-1\nplt.matshow(pat)","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fed965172e8>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"b9cf59e9cd9b7830aa4d28c98f1247e3b9e9fe0b","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"6bc2d3","input":"import sknw","pos":20,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"defcdc","input":"p*2 - 1","output":{"0":{"data":{"text/plain":"array([-1,  1, -1,  1,  1])"},"exec_count":9,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":98,"id":"307648","input":"np.mean((np.mean(xb), np.mean(yb)))","output":{"0":{"data":{"text/plain":"0.4797979797979798"},"exec_count":98,"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","id":"4b09cb","input":"","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"0b2b98","input":"```\npat=2*floor(2*rand(500,10))-1;             % Random binary pattern\nw=pat*pat';                                % Hebbian learning\ns=rand(500,1)-0.5;                         % Initialize network\nfor t=2:10; s(:,t)=sign(w*s(:,t-1)); end   % Update network\nplot(s'*pat/500)                           % plot overlaps\n```","pos":45,"type":"cell"}
{"id":0,"time":1618272235998,"type":"user"}
{"last_load":1618272238294,"type":"file"}