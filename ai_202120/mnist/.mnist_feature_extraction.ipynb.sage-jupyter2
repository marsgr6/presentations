{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"43e1fd","input":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error","metadata":{"trusted":true},"output":{"0":{"name":"stderr","output_type":"stream","text":"/home/nbuser/anaconda3_501/lib/python3.6/site-packages/matplotlib/font_manager.py:229: UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.\n  'Matplotlib is building the font cache using fc-list. '\n"}},"pos":0,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"14b8f7","input":"cols = 10\nrows = 10\nfig, ax_array = plt.subplots(rows, cols, figsize=(10,10))\nfor i, ax_row in enumerate(ax_array):\n    dlabel = mnist[mnist['label'] == i].head(10)\n    mlabel = np.array(dlabel)[:,1:]\n    for j, axes in enumerate(ax_row):\n        axes.axis('off')\n        axes.imshow(mlabel[j].reshape(28,28))","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"47a0369686f494ea335f3f9f2167efa4e1e8317b","text/plain":"<Figure size 720x720 with 100 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":18,"id":"db1770","input":"valor, freq = np.unique(d1, return_counts=True)\nplt.subplot(121)\nplt.bar(valor[1:], freq[1:])\nplt.ylim(0,25)\n\nplt.subplot(122)\nvalor, freq = np.unique(d0, return_counts=True)\nplt.bar(valor[1:], freq[1:])\nplt.ylim(0,25)","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"(0, 25)"},"exec_count":18,"output_type":"execute_result"},"1":{"data":{"image/png":"daa41e98893db90609b9dfab700da7a12ca1a83f","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"6dd00d","input":"l, fl = np.unique(mnist['label'], return_counts=True)\nplt.bar(l, fl)\nl, fl","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"(array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n array([4132, 4684, 4177, 4351, 4072, 3795, 4137, 4401, 4063, 4188]))"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"image/png":"56738d2ea82b2c3165a5e6d2846052ba2fd6aa5e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"b693c9","input":"d1 = np.array(mnist.iloc[2,1:])\nplt.matshow(d1.reshape(28,28), cmap=\"gray\")\n\nd0 = np.array(mnist.iloc[4,1:])\nplt.matshow(d0.reshape(28,28), cmap=\"gray\")\n","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fe9a1ecff28>"},"exec_count":23,"output_type":"execute_result"},"1":{"data":{"image/png":"71d4a13490f46a5ad1a7166ed70b3672191a2676","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"8aaf4579463957a0d4081f80df3f42d02c29416f","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"51e98d","input":"valor, freq = np.unique(d1, return_counts=True)\nplt.subplot(121)\nplt.bar(valor[1:], freq[1:])\nplt.ylim(0,25)\n\nplt.subplot(122)\nvalor, freq = np.unique(d0, return_counts=True)\nplt.bar(valor[1:], freq[1:])\nplt.ylim(0,25)","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"(0, 25)"},"exec_count":24,"output_type":"execute_result"},"1":{"data":{"image/png":"c76c1e98129b52d710ac7dfac46d82ad432b096c","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":5,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"8371fe","input":"dlabel8 = mnist[mnist['label'] == 8].head(10)\ndlabel8","metadata":{"trusted":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>10</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>82</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>135</th>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows Ã— 785 columns</p>\n</div>","text/plain":"     label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n10       8       0       0       0       0       0       0       0       0   \n20       8       0       0       0       0       0       0       0       0   \n30       8       0       0       0       0       0       0       0       0   \n67       8       0       0       0       0       0       0       0       0   \n82       8       0       0       0       0       0       0       0       0   \n87       8       0       0       0       0       0       0       0       0   \n105      8       0       0       0       0       0       0       0       0   \n106      8       0       0       0       0       0       0       0       0   \n131      8       0       0       0       0       0       0       0       0   \n135      8       0       0       0       0       0       0       0       0   \n\n     pixel8    ...     pixel774  pixel775  pixel776  pixel777  pixel778  \\\n10        0    ...            0         0         0         0         0   \n20        0    ...            0         0         0         0         0   \n30        0    ...            0         0         0         0         0   \n67        0    ...            0         0         0         0         0   \n82        0    ...            0         0         0         0         0   \n87        0    ...            0         0         0         0         0   \n105       0    ...            0         0         0         0         0   \n106       0    ...            0         0         0         0         0   \n131       0    ...            0         0         0         0         0   \n135       0    ...            0         0         0         0         0   \n\n     pixel779  pixel780  pixel781  pixel782  pixel783  \n10          0         0         0         0         0  \n20          0         0         0         0         0  \n30          0         0         0         0         0  \n67          0         0         0         0         0  \n82          0         0         0         0         0  \n87          0         0         0         0         0  \n105         0         0         0         0         0  \n106         0         0         0         0         0  \n131         0         0         0         0         0  \n135         0         0         0         0         0  \n\n[10 rows x 785 columns]"},"exec_count":26,"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":29,"id":"ecfa92","input":"r_o = 1 / (1 + np.exp(-w_o*r_h))\nd_o = (r_o*(1-r_o)) * (r_d[:,i] - r_o)\nd_o\nd_h = np.multiply(np.multiply(r_h, (1-r_h)), (w_o.T*d_o))\nd_h\n# Update weights\nw_o = w_o + 0.7*(r_h*d_o.T).T\n\nw_h = w_h + 0.7*(r_i[:,i]*d_h.T).T\n\nr_o_test = 1 / (1 + np.exp(-w_o*(1/(1+np.exp(-w_h*r_i)))))\nr_o_test","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"matrix([[0.5312634 , 0.53280452, 0.53225026, 0.53378725]])"},"exec_count":29,"output_type":"execute_result"}},"pos":14,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"502125","input":"# Parameters, neurons: input, hidden, output\nnp.random.seed(0)\n\nN_i = 2; N_h = 6; N_o = 1\n\n# XOR input\nr_i = np.matrix('0 1 0 1; 0 0 1 1')\n\n# XOR output\nr_d = np.matrix('0 1 1 0')\n\n# Initialize randomly the weights\n# Hidden layer\nw_h = np.random.rand(N_h,N_i) - 0.5\n# Output layer\nw_o=np.random.rand(N_o,N_h) - 0.5\n\ntraining_steps = 10000\nmse = []\n\nfor i in range(training_steps):\n    # Select training pattern randomly\n    i = np.floor(4*np.random.rand()).astype('int')\n\n    # Feed-forward the input to hidden layer\n    r_h = 1 / (1 + np.exp(-w_h*r_i[:,i]))\n\n    # Feed-forward the input to the output layer\n    r_o = 1 / (1 + np.exp(-w_o*r_h))\n\n    # Calculate the network error\n    d_o = (r_o*(1-r_o)) * (r_d[:,i] - r_o)\n\n    # Calculate the responsability of the hidden network in the error\n    d_h = np.multiply(np.multiply(r_h, (1-r_h)), (w_o.T*d_o))\n\n    # Update weights learning rate = 0.7\n    w_o = w_o + 0.7*(r_h*d_o.T).T\n\n    w_h = w_h + 0.7*(r_i[:,i]*d_h.T).T\n\n    # Test all patterns\n    r_o_test = 1 / (1 + np.exp(-w_o*(1/(1+np.exp(-w_h*r_i)))))\n\n    mse += [mean_squared_error(r_d, r_o_test)]\n    \nplt.plot(mse)\nplt.show()","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"a629edf0d4117a335a3837d8d16f04262975576a","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":15,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"1d2d8f","input":"n_classes = 2\nplot_colors = \"gb\"\nplot_markers = \"oo\"\n\nx_min, x_max = -0.1, 1.1\ny_min, y_max = -0.1, 1.1\nxx, yy = np.meshgrid(np.linspace(x_min, x_max, 100),\n                     np.linspace(y_min, y_max, 100))\n\nZ = 1 / (1 + np.exp(-w_o*(1/(1+np.exp(-w_h*np.c_[xx.ravel(), yy.ravel()].T)))))\n\nZ = Z.reshape(xx.shape)\n\n# Plot contour\ncs = plt.contourf(xx, yy, Z, cmap=plt.cm.RdYlBu)\ncsl = plt.contour(xx, yy, Z, cmap=plt.cm.RdYlBu)\n\n# Make a colorbar for the cs returned by the contourf call.\ncbar = plt.colorbar(cs)\ncbar.ax.set_ylabel('Network output')\n# Add the contour line levels to the colorbar\ncbar.add_lines(csl)\n\nplt.xlabel(\"X\")\nplt.ylabel(\"Y\")\n\nt_names = [\"0s\", \"1s\"]\n\nrd = np.squeeze(np.asarray(r_d))\n\n# Plot the training points\nfor i, color, m in zip(range(n_classes), plot_colors, plot_markers):\n    idx = np.where(rd == i)\n    plt.scatter(np.squeeze(np.asarray(r_i.T[list(idx[0]),0])), \n                np.squeeze(np.asarray(r_i.T[list(idx[0]),1])), \n                c=color, label=t_names[i], cmap=plt.cm.RdYlBu, \n                edgecolor='black', s=100, marker=m)\n\nplt.suptitle(\"Decision surface of a mlp classifier\")\nplt.legend(loc='center right', borderpad=0, handletextpad=0)\nplt.axis(\"tight\")\nplt.show()","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"5a70ef3cede6f32d24156a1aba12586e655512fb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":19,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"9261be","input":"d0 = np.array(mnist.iloc[4,1:])\nd0[np.where(d0 > 0)[0]] = 1\nd0 = d0.reshape(28,28)\nprint(d0)","metadata":{"trusted":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0]\n [0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0]\n [0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0]\n [0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]\n"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":49,"id":"0dffbb","input":"# Parameters, neurons: input, hidden, output\nnp.random.seed(0)\n\nN_i = 2; N_h = 2; N_o = 1\n\n# XOR input\nr_i = np.matrix('0 1 0 1; 0 0 1 1')\n\n# XOR output\nr_d = np.matrix('0 1 1 0')\n\n# Initialize randomly the weights\n# Hidden layer\nw_h = np.random.rand(N_h,N_i) - 0.5\n# Output layer\nw_o=np.random.rand(N_o,N_h) - 0.5\n\ni = 2\n\nr_i, r_d, w_h, w_h*r_i[:,i], 1 / (1 + np.exp(-w_h*r_i[:,i]))\nr_h = 1 / (1 + np.exp(-w_h*r_i[:,i]))\nw_o*r_h, 0.55*-0.07 + 0.51*0.14, r_d[:,i] - 1 / (1 + np.exp(-w_o*r_h)) ","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"(matrix([[0.03231984]]), 0.0329, matrix([[0.49192074]]))"},"exec_count":49,"output_type":"execute_result"}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"7bb548","input":"from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nimport numpy as np\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\n\nsurf = ax.plot_surface(xx, yy, Z, cmap=plt.cm.RdYlBu,\n                       linewidth=0, antialiased=False)\n\nax.view_init(30, -60)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Network response')\n\nplt.show()","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"55ec5e8ba2c0a9416ad564f2cbf35355e3bf52a5","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":20,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":50,"id":"650ad7","input":"sum_cols = d0.sum(axis=0)\nsum_rows = d0.sum(axis=1)\nplt.plot(np.concatenate((sum_cols,sum_rows)), ':.')","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe94f886550>]"},"exec_count":50,"output_type":"execute_result"},"1":{"data":{"image/png":"04af5520217ca4420d5e4cd3b31c88ca3227bd56","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":10,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":52,"id":"019857","input":"d1 = np.array(mnist.iloc[2,1:])\nd1[np.where(d1 > 0)[0]] = 1\nd1 = d1.reshape(28,28)\nprint(d1)\nsum_cols = d1.sum(axis=0)\nsum_rows = d1.sum(axis=1)\nplt.plot(np.concatenate((sum_cols,sum_rows)), ':.')","metadata":{"trusted":true},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]\n"},"1":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fe9a42d7160>]"},"exec_count":52,"output_type":"execute_result"},"2":{"data":{"image/png":"b1735e4f9c16ea52d6f3ef9d0a28296e1ac65852","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":54,"id":"f0f7e9","input":"cols = 10\nrows = 10\nfig, ax_array = plt.subplots(rows, cols, figsize=(10,10))\nfor i, ax_row in enumerate(ax_array):\n    dlabel = mnist[mnist['label'] == i].head(10)\n    mlabel = np.array(dlabel)[:,1:]\n    for j, axes in enumerate(ax_row):\n        valor, freq = np.unique(mlabel[j], return_counts=True)\n        axes.bar(valor[1:], freq[1:])\n        axes.set_ylim(0,10)","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"ab9044f140e4212c5e61e0019f84a47a7b26d2ed","text/plain":"<Figure size 720x720 with 100 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":55,"id":"9a9081","input":"cols = 10\nrows = 10\nfig, ax_array = plt.subplots(rows, cols, figsize=(10,10))\nfor i, ax_row in enumerate(ax_array):\n    dlabel = mnist[mnist['label'] == i].head(10)\n    mlabel = np.array(dlabel)[:,1:]\n    for j, axes in enumerate(ax_row):\n        d = mlabel[j]\n        d[np.where(d > 0)[0]] = 1\n        d = d.reshape(28,28)\n\n        sum_cols = d.sum(axis=0)\n        sum_rows = d.sum(axis=1)\n        axes.plot(np.concatenate((sum_cols,sum_rows)), ':.')\n\n        axes.set_ylim(0,28)","metadata":{"trusted":true},"output":{"0":{"data":{"image/png":"18713abce2e0db05b141ba794e462a96b80b5206","text/plain":"<Figure size 720x720 with 100 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":12,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"e86d84","input":"mnist = pd.read_csv('https://raw.githubusercontent.com/sbussmann/kaggle-mnist/master/Data/train.csv')\nmnist.head()","metadata":{"trusted":true},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>label</th>\n      <th>pixel0</th>\n      <th>pixel1</th>\n      <th>pixel2</th>\n      <th>pixel3</th>\n      <th>pixel4</th>\n      <th>pixel5</th>\n      <th>pixel6</th>\n      <th>pixel7</th>\n      <th>pixel8</th>\n      <th>...</th>\n      <th>pixel774</th>\n      <th>pixel775</th>\n      <th>pixel776</th>\n      <th>pixel777</th>\n      <th>pixel778</th>\n      <th>pixel779</th>\n      <th>pixel780</th>\n      <th>pixel781</th>\n      <th>pixel782</th>\n      <th>pixel783</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 785 columns</p>\n</div>","text/plain":"   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n0      1       0       0       0       0       0       0       0       0   \n1      0       0       0       0       0       0       0       0       0   \n2      1       0       0       0       0       0       0       0       0   \n3      4       0       0       0       0       0       0       0       0   \n4      0       0       0       0       0       0       0       0       0   \n\n   pixel8    ...     pixel774  pixel775  pixel776  pixel777  pixel778  \\\n0       0    ...            0         0         0         0         0   \n1       0    ...            0         0         0         0         0   \n2       0    ...            0         0         0         0         0   \n3       0    ...            0         0         0         0         0   \n4       0    ...            0         0         0         0         0   \n\n   pixel779  pixel780  pixel781  pixel782  pixel783  \n0         0         0         0         0         0  \n1         0         0         0         0         0  \n2         0         0         0         0         0  \n3         0         0         0         0         0  \n4         0         0         0         0         0  \n\n[5 rows x 785 columns]"},"exec_count":6,"output_type":"execute_result"}},"pos":1,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":61,"id":"26bfaa","input":"MSE_nh += [mse[-1]]","metadata":{"trusted":true},"pos":16,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":62,"id":"c67821","input":"MSE_nh","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"[0.11494629056638084,\n 0.010301120722310049,\n 0.0033406361851860975,\n 0.003319820189737644]"},"exec_count":62,"output_type":"execute_result"}},"pos":17,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":63,"id":"a33dab","input":"plt.plot([2,4,8,16], MSE_nh)","metadata":{"trusted":true},"output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x7fc490b31cc0>]"},"exec_count":63,"output_type":"execute_result"},"1":{"data":{"image/png":"21857886bdf49e9078d0a282f77cde647c029eca","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":18,"state":"done","type":"cell"}
{"cell_type":"code","id":"248329","input":"","metadata":{"trusted":true},"pos":21,"state":"done","type":"cell"}
{"id":0,"time":1620665385839,"type":"user"}
{"last_load":1618273526062,"type":"file"}