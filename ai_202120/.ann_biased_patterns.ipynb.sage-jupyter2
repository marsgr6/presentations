{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-debd5b2e-f271-4bd0-82ca-f889bc8c1edc.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"0cef76","input":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import binom\nfrom scipy.stats import bernoulli\nfrom PIL import Image\nfrom matplotlib import colors","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"a96fe0","input":"noise_level = 0.9\n\nnoisy_lenna = lenna.copy()\n\nfor i in range(np.shape(noisy_lenna)[1]):\n    if np.random.random() < noise_level:\n        noisy_lenna[0, i] = bernoulli.rvs(ap)\n\nplt.subplot(1,2,1)\nplt.imshow(X[-1].reshape((128,128)), cmap=cmap)\nplt.subplot(1,2,2)\nplt.imshow(noisy_lenna.reshape((128,128)), cmap=cmap)","output":{"0":{"data":{"text/plain":"<matplotlib.image.AxesImage at 0x7fa5039453a0>"},"exec_count":12,"output_type":"execute_result"},"1":{"data":{"image/png":"1482b350ee17631f6ae41eb4dc6d06e23a0633ba","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"2a7b5a","input":"x = X[-1]  # Learned Lenna is in X, last pattern\n\nxt = np.copy(noisy_lenna.flatten())  # init network in noisy lenna\n        \nm = [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # initial overlap\n\nfig, ax = plt.subplots(nrows=1, ncols=4, figsize=(16,32))\nploti = 0\n\na_net = []\n\nfor ti in range(100):\n    # network update for t=100\n    a_net += [np.mean(xt)]\n    # update each neuron xt[nxi]\n    xt = np.array([(np.mean(normalize_vector(xt[C[nxi]])*W[nxi]) \n                    - act_threshold(xt[C[nxi]], threshold) >= 0)  # TH(local_field, threshod)\n                   if np.var(xt[C[nxi]])  # if variance is not zero\n                   else xt[nxi]  # state does not change otherwise\n                   for nxi in range(N)])\n    xt = xt.astype('int')\n    m += [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # test overlap x and xt (net state)\n    if not (ti % 5):\n        print(np.mean(xt))\n        ax[ploti].imshow(xt.reshape((128,128)), cmap=cmap)\n        ploti += 1\n    if m[-1] == m[-2]:\n        break\nplt.show()\nplt.plot(m)\nplt.show()\nplt.plot(a_net)\nm[-1]","output":{"0":{"name":"stdout","output_type":"stream","text":"0.00360107421875\n0.02740478515625\n0.0360107421875\n0.10491943359375\n"},"1":{"data":{"image/png":"50cc1347ba25eb21d093f20213753c198aefbbf2","text/plain":"<Figure size 1152x2304 with 4 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"0f199bbc85e3b93b7f68b068e3ff305570d364f7","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"data":{"text/plain":"0.99804441364684"},"exec_count":13,"output_type":"execute_result"},"4":{"data":{"image/png":"da7b0e2dc9e5969d785530e98f29da04508a4224","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"855b4b","input":"# Random network\nN = 128*128  # number of nodes 128x128 pixels\nk = 100  # avg. number of connections per node\nP = 10  # random patterns to learn\np = k/N\nC = []\nfor i in range(N):\n    C += np.where(np.insert(bernoulli.rvs(p, size=(N-1)), i, 0))\nC = np.array(C, dtype=\"object\")","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"b7da92","input":"# Pattern generation, random with p(xi=1)=a\n\nP = 9  # random patterns to learn\nap = 0.1  # pattern activity\nX = binom.rvs(n=1, p=ap, size=(P, N))\nplt.matshow(X[0].reshape(128,128)), np.mean(X)\nnp.shape(X)","output":{"0":{"data":{"text/plain":"(9, 16384)"},"exec_count":3,"output_type":"execute_result"},"1":{"data":{"image/png":"5e32beb2aac8c4ab610d6bd89f0463eeff7ee2ff","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"15b90b","input":"cmap = colors.ListedColormap(['black', 'white'])\n\nimg = Image.open('./lenna.png')\nimg = img.resize((128,128), Image.ANTIALIAS)\nimggs = img.convert('L')\nth_value = 185\nimgbw = np.asarray(imggs)\nimgbw = (imgbw > th_value)*1\nimgbw = imgbw\nplt.matshow(imgbw, cmap=cmap)\nprint('activity:', np.mean(imgbw))\nlenna = imgbw.reshape(1, 128*128)\nX = np.concatenate((X, lenna))\nnp.shape(X), np.mean(lenna), np.mean(X[-1])","output":{"0":{"name":"stdout","output_type":"stream","text":"activity: 0.1044921875\n"},"1":{"data":{"text/plain":"((10, 16384), 0.1044921875, 0.1044921875)"},"exec_count":4,"output_type":"execute_result"},"2":{"data":{"image/png":"4d91fb4c544b45f35ae01f8d41a6e84c4f969614","text/plain":"<Figure size 288x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"f6f743","input":"threshold = (1-2*ap)/(2*np.sqrt(ap*(1-ap)))\nnX = np.array([(x - np.mean(x))/np.sqrt(np.mean(x)*(1-np.mean(x))) for x in X])\nnp.shape(X), np.mean(nX), np.std(nX), threshold","output":{"0":{"data":{"text/plain":"((10, 16384), -7.632783294297952e-18, 1.0, 1.3333333333333333)"},"exec_count":5,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"b59c61","input":"# Weights initialization\nW = np.array([np.zeros(len(ci)) for ci in C])\n\n#for each pattern x in X\nfor x in nX:\n    # for each node i\n    for i in range(N):\n        W[i] = W[i] + x[C[i]]*x[i]","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"c104ec","input":"def normalize_vector(vector):\n    av = np.mean(vector)\n    return (vector - av)/np.sqrt(av*(1-av))\n\ndef act_threshold(neighbors, th):\n    threshold = th\n    if np.mean(neighbors) > 0.5:\n        threshold = -th\n    return threshold","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"06841a","input":"# Measure the quality of retrieval \nM = []  # M is 1, perfect retrieval, M is 0 no retrieval\n\n#for each pattern x in X\nfor x in X:\n    xt = np.copy(x)  # pattern x in time 0\n    \n    m = [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # initianl overlap in time 0, x is equal to xt, so m=1\n    \n    # update network for 100 steps\n    for ti in range(100):\n        # update each neuron xt[nxi]\n        xt = np.array([(np.mean(normalize_vector(xt[C[nxi]])*W[nxi]) \n                        - act_threshold(xt[C[nxi]], threshold) >= 0)  # TH(local_field, threshod)\n                       if np.var(xt[C[nxi]])  # if variance is not zero\n                       else xt[nxi]  # state does not change otherwise\n                       for nxi in range(N)])\n        xt = xt.astype('int')\n        m += [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # calculate overlap\n        if m[-1] == m[-2]:\n            break\n    M += [m[-1]]\n    \nplt.plot(np.array(range(1,len(X)+1))/k, M, ':o')\nplt.xlabel(r\"$\\alpha$\")\nplt.ylabel(\"m\")\nplt.ylim((0,1))","output":{"0":{"data":{"text/plain":"(0.0, 1.0)"},"exec_count":8,"output_type":"execute_result"},"1":{"data":{"image/png":"873041a7020b53650efdd1f03f5a2e8ddbf4888d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"122d8e","input":"plt.subplot(1,2,1)\nplt.imshow(xt.reshape((128,128)), cmap=cmap)\nplt.subplot(1,2,2)\nplt.imshow(imgbw, cmap=cmap)\n\nnp.mean(X[-1])","output":{"0":{"data":{"text/plain":"0.1044921875"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"c1a6f90c8f5425b1312dfb4b9d750c0a0aae84c7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":8,"type":"cell"}
{"id":0,"time":1624897309624,"type":"user"}
{"last_load":1624031011008,"type":"file"}