{"backend_state":"init","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-c8b95fc7-242b-4105-a018-d8ef42cc25ab.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"a27da3","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":103,"id":"e787f8","input":"#np.random.seed(123)\n\nN = 10  # number of nodes 128x128 pixels\nk = 4  # avg. number of connections per node\nP = 10  # random patterns to learn\n\n# C := Network structure (connectivity topology)\nC = np.zeros((N,k), dtype='int')\nfor i in range(N):\n    for ki in range(k//2):\n        C[i, ki] = i + (ki+1)\n        C[i, ki+k//2] = i - (ki + 1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C >= N)] = C[np.where(C >= N)] - N\n\nC, np.shape(C)\n\nomega = 0.0\nall_nodes = set(range(N))\n#print(all_nodes)\nfor i,ci in enumerate(C):\n    for j,cj in enumerate(ci):\n        #print(i, ci, cj, j)\n        if np.random.random() < omega:\n            available_nodes = list(all_nodes - (set([i] + ci) - set([cj])))[1:]\n            C[i, j] = np.random.choice(available_nodes)\nC","output":{"0":{"data":{"text/plain":"array([[1, 2, 9, 8],\n       [2, 3, 0, 9],\n       [3, 4, 1, 0],\n       [4, 5, 6, 1],\n       [5, 6, 1, 2],\n       [6, 7, 4, 3],\n       [3, 8, 5, 4],\n       [8, 9, 6, 5],\n       [9, 0, 7, 6],\n       [0, 2, 8, 8]])"},"exec_count":103,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"09bfd8","input":"import numpy as np\nfrom scipy.stats import binom\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nfrom matplotlib import colors","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6a66ed","input":"def normalize_vector(vector):\n    av = np.mean(vector)\n    return (vector - av)/np.sqrt(av*(1-av))\n\ndef act_threshold(neighbors, th):\n    if np.mean(neighbors) > 0.5:\n        th = -th\n    return th","pos":9,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e9689d","input":"from scipy.stats import bernoulli\n# Random network\nN = 128*128  # number of nodes 128x128 pixels\nk = 100  # avg. number of connections per node\nP = 10  # random patterns to learn\np = k/N\nC = []\nfor i in range(N):\n    C += np.where(np.insert(bernoulli.rvs(p, size=(N-1)), i, 0))\nC = np.array(C)\n#C","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"28bec0","input":"act_threshold([1,1,1,0], 1.33)","output":{"0":{"data":{"text/plain":"-1.33"},"exec_count":21,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"ad18f2","input":"# Random patterns\nfrom matplotlib import colors\ncmap = colors.ListedColormap(['black', \"white\"])\nX = binom.rvs(n=1, p=0.1, size=(P-1, N))\nX, np.shape(X), np.mean(X)\nplt.matshow(X[-1].reshape(128,128), cmap=cmap)\nnp.mean(X[-1]), np.shape(X)","output":{"0":{"data":{"text/plain":"(0.09466552734375, (9, 16384))"},"exec_count":30,"output_type":"execute_result"},"1":{"data":{"image/png":"e06c548678a16d2b748ebcf2c2689b3315af008c","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":30,"metadata":{"image/png":{"height":424,"width":431},"needs_background":"light"},"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"dadc3e","input":"img = Image.open('./ann/lenna.png')\nimg = img.resize((128,128), Image.ANTIALIAS)\nimggs = img.convert('L')\nth_value = 185\nimgbw = np.asarray(imggs)\nimgbw = (imgbw > th_value)*1\nimgbw = imgbw\nplt.matshow(imgbw, cmap=cmap)\n#print('activity:', 1 - np.mean(imgbw))\nlenna = imgbw.reshape(1, 128*128)\nX = np.concatenate((X, lenna))\nnp.shape(X), np.mean(imgbw)","output":{"0":{"data":{"text/plain":"((10, 16384), 0.103515625)"},"exec_count":31,"output_type":"execute_result"},"1":{"data":{"image/png":"b985a4e20b7c0153bd63ef5394845c52fbbfaeaa","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":31,"metadata":{"image/png":{"height":424,"width":431},"needs_background":"light"},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"e69fdf","input":"# pattern normalization\nnX = np.array([(x - np.mean(x))/np.sqrt(np.mean(x)*(1-np.mean(x))) for x in X])\nnp.mean(nX), np.mean(1)\nnX, np.shape(nX)","output":{"0":{"data":{"text/plain":"(array([[-0.33610693, -0.33610693, -0.33610693, ..., -0.33610693,\n          2.97524361, -0.33610693],\n        [-0.32600543, -0.32600543, -0.32600543, ...,  3.06743356,\n         -0.32600543, -0.32600543],\n        [-0.34192575, -0.34192575, -0.34192575, ..., -0.34192575,\n         -0.34192575, -0.34192575],\n        ...,\n        [-0.3348684 , -0.3348684 , -0.3348684 , ..., -0.3348684 ,\n         -0.3348684 , -0.3348684 ],\n        [-0.3233638 , -0.3233638 , -0.3233638 , ..., -0.3233638 ,\n         -0.3233638 , -0.3233638 ],\n        [-0.33980643, -0.33980643, -0.33980643, ..., -0.33980643,\n         -0.33980643, -0.33980643]]),\n (10, 16384))"},"exec_count":32,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"e517e6","input":"# init weights in 0\nW = np.array([np.zeros(len(ci)) for ci in C])\n\n#for each pattern x in X\nfor x in nX:\n    # for each node i\n    for i in range(N):\n        W[i] = W[i] + x[C[i]]*x[i]\n#W","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"7fbb35","input":"a = 0.1\nA = a*(1-a)\nthreshold = (1-2*a)/(2*np.sqrt(A))\nthreshold","output":{"0":{"data":{"text/plain":"1.3333333333333333"},"exec_count":34,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"9ad0ec","input":"# Measure the quality of retrieval \nM = []  # M is 1, perfect retrieval, M is 0 no retrieval\n\n#for each pattern x in X\n# X: original patterns 0/1\n# nX: normalized patterns\nfor x in X:\n    # xt: network state\n    xt = np.copy(x)  # pattern x in time 0\n\n    # initial overlap in time 0, x is equal to xt, so m=1\n    m = [np.sum(normalize_vector(x)*normalize_vector(xt))/N]\n\n    # update network for 100 steps\n    for ti in range(100):\n        xt = np.array([(np.mean(normalize_vector(xt[C[nxi]])*W[nxi])-act_threshold(xt[C[nxi]], threshold) >= 0) \n                       for nxi in range(N)])\n        #xt = xt.astype('int')\n        m += [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # calculate overlap\n        if m[-1] == m[-2]:\n            break\n    M += [m[-1]]\n    \nplt.plot(np.array(range(1,len(X)+1)), M, ':o')\nplt.ylim((0,1))","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:3: RuntimeWarning: invalid value encountered in true_divide\n  app.launch_new_instance()\n"},"1":{"data":{"text/plain":"(0.0, 1.0)"},"exec_count":35,"output_type":"execute_result"},"2":{"data":{"image/png":"8234d4b7081c1d6a968ed1431b6e15fe52993e7d","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":35,"metadata":{"image/png":{"height":415,"width":706},"needs_background":"light"},"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"81a6af","input":"plt.matshow(xt.reshape(128,128), cmap=cmap), m[-1]","output":{"0":{"data":{"text/plain":"(<matplotlib.image.AxesImage at 0x7f64bad83978>, 0.9960560396743132)"},"exec_count":36,"output_type":"execute_result"},"1":{"data":{"image/png":"c80c922234c166f91d96b27ad8e1b711475119a5","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":36,"metadata":{"image/png":{"height":424,"width":431},"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"edd21c","input":"plt.matshow(xt.reshape((128,128)), cmap=cmap)\na = plt.axis('off')","output":{"0":{"data":{"image/png":"fec9a49743365ab10a9ae50c370248bc2019f9bd","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":44,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":57,"id":"492d54","input":"noise_level = 0.9\n\nnoisy_lenna = lenna.copy()\n\nfor i in range(np.shape(noisy_lenna)[1]):\n    if np.random.random() < noise_level:\n        noisy_lenna[0, i] = bernoulli.rvs(0.1)\n\nplt.matshow(noisy_lenna.reshape((128,128)), cmap=cmap)\na = plt.axis('off')\n\nx = X[-1] \nplt.matshow(x.reshape((128,128)), cmap=cmap)\na = plt.axis('off')\n\nnoisy_lenna.reshape((128,128))\nnp.mean(noisy_lenna)","output":{"0":{"data":{"text/plain":"0.1029052734375"},"exec_count":57,"output_type":"execute_result"},"1":{"data":{"image/png":"2f2420deaf434111916c8c9bffcbe2e1d36637ec","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":57,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"},"2":{"data":{"image/png":"99c0a0b21165fdb619b468421dfe22a8ec3f9b37","text/plain":"<Figure size 504x504 with 1 Axes>"},"exec_count":57,"metadata":{"image/png":{"height":404,"width":405},"needs_background":"light"},"output_type":"execute_result"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":70,"id":"983199","input":"np.mean(noisy_lenna)","output":{"0":{"data":{"text/plain":"0.1029052734375"},"exec_count":70,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":72,"id":"8a46fc","input":"x = X[-1]  # Learned Lenna is in X, last pattern\n\nxt = np.copy(noisy_lenna.flatten())  # init network in noisy lenna\n        \nm = [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # initial overlap\n\nfig, ax = plt.subplots(nrows=1, ncols=4, figsize=(16,32))\nploti = 0\n\na_net = []\n\nfor ti in range(100):\n    # network update for t=100\n    a_net += [np.mean(xt)]\n    xt = np.array([(np.mean(normalize_vector(xt[C[nxi]])*W[nxi])-act_threshold(xt[C[nxi]], threshold) >= 0) \n                       for nxi in range(N)])\n    m += [np.sum(normalize_vector(x)*normalize_vector(xt))/N]  # test overlap x and xt (net state)\n    if not (ti % 5):\n        print(np.mean(xt))\n        ax[ploti].matshow(xt.reshape((128,128)), cmap=cmap)\n        ploti += 1\n    if m[-1] == m[-2]:\n        break\nplt.show()\nplt.plot(m)\nplt.show()\nplt.plot(a_net)\nm[-1]","output":{"0":{"name":"stderr","output_type":"stream","text":"/usr/local/lib/python3.6/dist-packages/ipykernel/__main__.py:3: RuntimeWarning: invalid value encountered in true_divide\n  app.launch_new_instance()\n"},"1":{"name":"stdout","output_type":"stream","text":"0.00372314453125\n"},"2":{"name":"stdout","output_type":"stream","text":"0.0242919921875\n"},"3":{"name":"stdout","output_type":"stream","text":"0.0418701171875\n"},"4":{"name":"stdout","output_type":"stream","text":"0.10357666015625\n"},"5":{"data":{"image/png":"c703c18f65c0e951c6b565374deec1710d1ff6f3","text/plain":"<Figure size 1152x2304 with 4 Axes>"},"exec_count":72,"metadata":{"image/png":{"height":228,"width":933},"needs_background":"light"},"output_type":"execute_result"},"6":{"data":{"image/png":"c84a484451ce2ca57da67efc56d9048dc8c0dc07","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":72,"metadata":{"image/png":{"height":411,"width":706},"needs_background":"light"},"output_type":"execute_result"},"7":{"data":{"text/plain":"0.9960560396743132"},"exec_count":72,"output_type":"execute_result"},"8":{"data":{"image/png":"03f0df3540f987d45691d5542fa3554f643b7c6e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":72,"metadata":{"image/png":{"height":411,"width":713},"needs_background":"light"},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":92,"id":"b45b4e","input":"i = 0\nci = [1, 2, 9, 8]\ncj = 1\nall_nodes - (set([i] + ci) - set([cj]))","output":{"0":{"data":{"text/plain":"{1, 3, 4, 5, 6, 7}"},"exec_count":92,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":99,"id":"dfbc50","input":"np.random.seed(123)\n\nN = 10  # number of nodes 128x128 pixels\nk = 4  # avg. number of connections per node\nP = 10  # random patterns to learn\n\n# C := Network structure (connectivity topology)\nC = np.zeros((N,k), dtype='int')\nfor i in range(N):\n    for ki in range(k//2):\n        C[i, ki] = i + (ki+1)\n        C[i, ki+k//2] = i - (ki + 1)\nC[np.where(C < 0)] = C[np.where(C < 0)] + N\nC[np.where(C >= N)] = C[np.where(C >= N)] - N\n\nC, np.shape(C)","output":{"0":{"data":{"text/plain":"(array([[1, 2, 9, 8],\n        [2, 3, 0, 9],\n        [3, 4, 1, 0],\n        [4, 5, 2, 1],\n        [5, 6, 3, 2],\n        [6, 7, 4, 3],\n        [7, 8, 5, 4],\n        [8, 9, 6, 5],\n        [9, 0, 7, 6],\n        [0, 1, 8, 7]]),\n (10, 4))"},"exec_count":99,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"id":0,"time":1619482624546,"type":"user"}
{"last_load":1619627495174,"type":"file"}