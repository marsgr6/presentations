{"backend_state":"init","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"958ab5","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"1e900e","input":"import networkx as nx\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.stats import bernoulli","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f66385","input":"plt.figure(figsize = (6, 6))\n\nG = nx.grid_2d_graph(3,3)\npos = dict( (n, n) for n in G.nodes() )\nnx.draw_networkx(G, pos=pos)","output":{"0":{"data":{"image/png":"5a692243ab0e4e41254f5f43c4180de6a5eb71aa","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":340,"width":349}},"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":100,"id":"3c6756","input":"list(RN.neighbors(0))","output":{"0":{"data":{"text/plain":"[9, 1, 8, 2]"},"exec_count":100,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":106,"id":"988b5a","input":"def rewire(node_i, adj_list, omega=0.0):\n    changed = 0\n    for i,vi in enumerate(adj_list[node_i]):\n        available_nodes = set(range(N)) - set(adj_list[node_i]) - set([node_i])\n        if np.random.random() < omega:\n            changed = 1\n            candidate = np.random.choice(list(available_nodes))\n            adj_list[node_i][i] = candidate\n    return changed","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":107,"id":"ca3f3f","input":"set(range(N)) - set(Ring[0]) - set([0])","output":{"0":{"data":{"text/plain":"{3, 4, 5, 6, 7}"},"exec_count":107,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":109,"id":"3aeed8","input":"w = 0.25\n[rewire(i, Ring, w) for i in range(N)]","output":{"0":{"data":{"text/plain":"[1, 0, 1, 1, 1, 0, 1, 1, 1, 1]"},"exec_count":109,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"8dbefd","input":"print(G.nodes)\nG.edges","output":{"0":{"name":"stdout","output_type":"stream","text":"[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]\n"},"1":{"data":{"text/plain":"EdgeView([((0, 0), (1, 0)), ((0, 0), (0, 1)), ((0, 1), (1, 1)), ((0, 1), (0, 2)), ((0, 2), (1, 2)), ((0, 2), (0, 3)), ((0, 3), (1, 3)), ((0, 3), (0, 4)), ((0, 4), (1, 4)), ((1, 0), (2, 0)), ((1, 0), (1, 1)), ((1, 1), (2, 1)), ((1, 1), (1, 2)), ((1, 2), (2, 2)), ((1, 2), (1, 3)), ((1, 3), (2, 3)), ((1, 3), (1, 4)), ((1, 4), (2, 4)), ((2, 0), (3, 0)), ((2, 0), (2, 1)), ((2, 1), (3, 1)), ((2, 1), (2, 2)), ((2, 2), (3, 2)), ((2, 2), (2, 3)), ((2, 3), (3, 3)), ((2, 3), (2, 4)), ((2, 4), (3, 4)), ((3, 0), (4, 0)), ((3, 0), (3, 1)), ((3, 1), (4, 1)), ((3, 1), (3, 2)), ((3, 2), (4, 2)), ((3, 2), (3, 3)), ((3, 3), (4, 3)), ((3, 3), (3, 4)), ((3, 4), (4, 4)), ((4, 0), (4, 1)), ((4, 1), (4, 2)), ((4, 2), (4, 3)), ((4, 3), (4, 4))])"},"exec_count":11,"output_type":"execute_result"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":110,"id":"1a1add","input":"Ring","output":{"0":{"data":{"text/plain":"array([[6, 1, 8, 2],\n       [0, 2, 9, 3],\n       [1, 3, 8, 4],\n       [2, 4, 0, 5],\n       [1, 5, 2, 6],\n       [4, 6, 3, 7],\n       [5, 7, 0, 8],\n       [6, 8, 1, 4],\n       [7, 9, 6, 1],\n       [8, 0, 5, 3]])"},"exec_count":110,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":117,"id":"e7114d","input":"np.random.seed(0)\n\nN = 50\nK = 4\n\n# Create ring\nnodes = np.array(range(N))\nRing = np.array([[nodes-(i+1), nodes+(i+1)] for i in range(K//2)]).reshape(-1, N)\nRing = np.transpose(Ring)\nRing, np.shape(Ring)\n# Correct borders\nRing[np.where(Ring < 0)] = Ring[np.where(Ring < 0)] + N\nRing[np.where(Ring >= N)] = Ring[np.where(Ring >= N)] - N\n\nw = 0.05\nchanged_nodes = [rewire(i, Ring, w) for i in range(N)]\n\ncolor_map = ['coral' if cn else \"cornflowerblue\" for cn in changed_nodes]\n\nedges = [(i, vi) for i in range(N) for vi in Ring[i]] \n\nSW = nx.DiGraph()\nSW.add_nodes_from(range(N))\nSW.add_edges_from(edges)\npos = nx.circular_layout(SW)\nplt.figure(figsize=(8,8))\nnx.draw_networkx(SW, pos=pos, node_color=color_map)","output":{"0":{"data":{"image/png":"46e02b3b757f87456c2a1e8198f59bed12692913","text/plain":"<Figure size 576x576 with 1 Axes>"},"exec_count":117,"metadata":{"image/png":{"height":449,"width":460}},"output_type":"execute_result"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":118,"id":"3dfd76","input":"pos = nx.spectral_layout(SW)\nplt.figure(figsize=(8,8))\nnx.draw_networkx(SW, pos=pos, node_color=color_map)","output":{"0":{"data":{"image/png":"96e4419c0751d3e1ae57564b611854cdd2308e51","text/plain":"<Figure size 576x576 with 1 Axes>"},"exec_count":118,"metadata":{"image/png":{"height":449,"width":460}},"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"accb59","input":"G[1,1]","output":{"0":{"data":{"text/plain":"AtlasView({(0, 1): {}, (2, 1): {}, (1, 0): {}, (1, 2): {}})"},"exec_count":12,"output_type":"execute_result"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":124,"id":"4bb5a2","input":"centers = np.where(changed_nodes)[0]\nsatellites = list(set(range(N)) - set(centers))\npos = nx.shell_layout(SW, [centers, satellites])\nplt.figure(figsize=(8,8))\nnx.draw_networkx(SW, pos=pos, node_color=color_map)","output":{"0":{"data":{"image/png":"71b8c21a594b9e386cff983d33f96f3429ea1582","text/plain":"<Figure size 576x576 with 1 Axes>"},"exec_count":124,"metadata":{"image/png":{"height":449,"width":460}},"output_type":"execute_result"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":50,"id":"35ce09","input":"# Random network\nN = 10  # nodes\nK = 1.5  # average connectivity\np = K / N  # connection probability\n\nnp.random.seed(1)\nadjacency_matrix = bernoulli.rvs(p, size=(N, N))\nnp.fill_diagonal(adjacency_matrix, 0)\nadjacency_matrix","output":{"0":{"data":{"text/plain":"array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n       [0, 1, 0, 0, 1, 1, 0, 0, 0, 1],\n       [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n       [1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n       [1, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [1, 0, 0, 0, 0, 1, 0, 1, 0, 0],\n       [0, 1, 0, 0, 0, 0, 1, 0, 0, 0]])"},"exec_count":50,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":51,"id":"1b4d44","input":"from_node, to_node = np.where(adjacency_matrix)\nedges = [ei for ei in zip(from_node, to_node)]\nprint(edges)","output":{"0":{"name":"stdout","output_type":"stream","text":"[(1, 3), (2, 1), (2, 4), (2, 5), (2, 9), (3, 2), (4, 0), (4, 6), (6, 8), (7, 0), (7, 6), (8, 0), (8, 5), (8, 7), (9, 1), (9, 6)]\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":52,"id":"63c06d","input":"ERG = nx.DiGraph()\nERG.add_nodes_from(range(10))\nERG.add_edges_from(edges)\npos = nx.circular_layout(ERG)\nplt.figure(figsize=(6,6))\nnx.draw_networkx(ERG, pos=pos)","output":{"0":{"data":{"image/png":"f562ce63ed284cbd77cf75d9a152295e4decaa38","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":52,"metadata":{"image/png":{"height":340,"width":349}},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"399aef","input":"ERGsym","output":{"0":{"data":{"text/plain":"array([[0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n       [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],\n       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n       [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])"},"exec_count":63,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":69,"id":"f4c93d","input":"p = 0.15\nERGsym = np.zeros((N, N), dtype='int')\nfor i in range(N):\n    for j in range(i+1, N):\n        value_ij = bernoulli.rvs(p)\n        ERGsym[i, j] = value_ij\n        ERGsym[j, i] = value_ij\n\nfrom_node, to_node = np.where(ERGsym)\nedges = [ei for ei in zip(from_node, to_node)]\n\nERGs = nx.DiGraph()\nERGs.add_nodes_from(range(10))\nERGs.add_edges_from(edges)\npos = nx.circular_layout(ERGs)\nplt.figure(figsize=(6,6))\nnx.draw_networkx(ERGs, pos=pos)","output":{"0":{"data":{"image/png":"5d0b06ad6b73fb1c62e062c32e2261b8bd363ba2","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":69,"metadata":{"image/png":{"height":340,"width":349}},"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"ebb4c7","input":"G = nx.watts_strogatz_graph(n = 10, k = 1, p = 0.0)\n  \nplt.figure(figsize = (6, 6))\npos = nx.circular_layout(G)\nnx.draw_networkx(G, pos=pos)","output":{"0":{"data":{"image/png":"635cb53a191058db9a33e1849c16cbef06e6fbbc","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":71,"metadata":{"image/png":{"height":340,"width":349}},"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"f9fd42","input":"N = 10\nK = 4\nnodes = np.array(range(N))\nRing = np.array([[nodes-(i+1), nodes+(i+1)] for i in range(K//2)]).reshape(-1, N)  # Remove reshape\nRing = np.transpose(Ring)  # Comment this line\nRing, np.shape(Ring)","output":{"0":{"data":{"text/plain":"(array([[-1,  1, -2,  2],\n        [ 0,  2, -1,  3],\n        [ 1,  3,  0,  4],\n        [ 2,  4,  1,  5],\n        [ 3,  5,  2,  6],\n        [ 4,  6,  3,  7],\n        [ 5,  7,  4,  8],\n        [ 6,  8,  5,  9],\n        [ 7,  9,  6, 10],\n        [ 8, 10,  7, 11]]),\n (10, 4))"},"exec_count":79,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"1b9b0d","input":"# Corrections\nRing[np.where(Ring < 0)] = Ring[np.where(Ring < 0)] + N\nRing[np.where(Ring >= N)] = Ring[np.where(Ring >= N)] - N\n\nRing","output":{"0":{"data":{"text/plain":"array([[9, 1, 8, 2],\n       [0, 2, 9, 3],\n       [1, 3, 0, 4],\n       [2, 4, 1, 5],\n       [3, 5, 2, 6],\n       [4, 6, 3, 7],\n       [5, 7, 4, 8],\n       [6, 8, 5, 9],\n       [7, 9, 6, 0],\n       [8, 0, 7, 1]])"},"exec_count":83,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"a6bd16","input":"edges = [(i, vi) for i in range(N) for vi in Ring[i]] \nprint(edges)","output":{"0":{"name":"stdout","output_type":"stream","text":"[(0, 9), (0, 1), (0, 8), (0, 2), (1, 0), (1, 2), (1, 9), (1, 3), (2, 1), (2, 3), (2, 0), (2, 4), (3, 2), (3, 4), (3, 1), (3, 5), (4, 3), (4, 5), (4, 2), (4, 6), (5, 4), (5, 6), (5, 3), (5, 7), (6, 5), (6, 7), (6, 4), (6, 8), (7, 6), (7, 8), (7, 5), (7, 9), (8, 7), (8, 9), (8, 6), (8, 0), (9, 8), (9, 0), (9, 7), (9, 1)]\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":87,"id":"e527d1","input":"RN = nx.DiGraph()\nRN.add_nodes_from(range(10))\nRN.add_edges_from(edges)\npos = nx.circular_layout(RN)\nplt.figure(figsize=(6,6))\nnx.draw_networkx(RN, pos=pos)","output":{"0":{"data":{"image/png":"61344fe733cfee5ac59b5c2056f692e2b128e6ea","text/plain":"<Figure size 432x432 with 1 Axes>"},"exec_count":87,"metadata":{"image/png":{"height":340,"width":349}},"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"markdown","id":"43e4c8","input":"# Implement 1D Grid and rewire using an $\\omega$ parameter\n\nA network $G$ is a tuple (v, e) contains:\n\n- $N$ nodes or vertexs $v \\in \\{1, 2, \\dots, N \\}$\n- $K$ average connection per node (network degree).\n  - $K = K_l + K_r$, with $K_l$: local connections, $K_r$: random shortcuts.\n- $\\omega = K_r / K$, $\\omega \\in (0,1)$.\n\nFor $\\omega=1$ we have a random network: https://en.wikipedia.org/wiki/Erdős–Rényi_model","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"891dd6","input":"## Regular ring (1D grid) with $k$ nearest neighbors","pos":11,"type":"cell"}
{"id":0,"time":1620692997187,"type":"user"}
{"last_load":1620697701337,"type":"file"}